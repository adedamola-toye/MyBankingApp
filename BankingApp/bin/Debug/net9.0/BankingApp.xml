<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BankingApp</name>
    </assembly>
    <members>
        <member name="T:BankingApp.Data.UserFileDataStore">
            <summary>
            Provides file-based persistence for user data using JSON serialization
            </summary>
            <remarks>
            Implements <see cref="T:BankingApp.Interfaces.IDataStore`2"/> for storing user data in a JSON file.
            Handles circular references and type information during serialization.
            </remarks>
        </member>
        <member name="M:BankingApp.Data.UserFileDataStore.Load">
            <summary>
            Loads user data from the JSON file
            </summary>
            <returns>
            Dictionary of users keyed by UserId. Returns empty dictionary if:
            - File doesn't exist
            - File is empty
            - Deserialization fails
            </returns>
            <remarks>
            Additional behaviors:
            <list type="bullet">
              <item><description>Automatically recreates owner references for accounts</description></item>
              <item><description>Uses TypeNameHandling.All to preserve polymorphic types</description></item>
              <item><description>Handles circular references during deserialization</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:BankingApp.Data.UserFileDataStore.Save(System.Collections.Generic.Dictionary{System.String,BankingApp.Models.User})">
            <summary>
            Saves user data to the JSON file
            </summary>
            <param name="data">User dictionary to serialize</param>
            <remarks>
            Serialization features:
            <list type="bullet">
              <item><description>Formatted JSON output (indented)</description></item>
              <item><description>Preserves object references</description></item>
              <item><description>Includes type information for polymorphic serialization</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:BankingApp.Helpers.AccountNumberGenerator">
            <summary>
            Generates unique bank account numbers
            </summary>
        </member>
        <member name="M:BankingApp.Helpers.AccountNumberGenerator.Generate">
            <summary>
            Generates a new 10-digit account number based on current timestamp
            </summary>
            <returns>10-character account number string</returns>
            <remarks>
            Uses the last 10 digits of the current DateTime ticks value.
            This provides a simple but reasonably unique identifier for demo purposes.
            For production systems, consider a more robust solution.
            </remarks>
        </member>
        <member name="T:BankingApp.Helpers.AccountFinder">
            <summary>
            Provides utility methods for locating bank accounts
            </summary>
        </member>
        <member name="M:BankingApp.Helpers.AccountFinder.FindAcctByAcctNo(BankingApp.Interfaces.IUserService,System.String)">
            <summary>
            Searches all users to find an account by account number
            </summary>
            <param name="userService">User service instance for accessing account data</param>
            <param name="accountNo">Account number to search for</param>
            <returns>
            Tuple containing:
            - Success status (true if found)
            - Status message
            - Found account (or null if not found)
            </returns>
            <example>
            var result = AccountFinder.FindAcctByAcctNo(userService, "1234567890");
            if (result.Success) { /* use result.Account */ }
            </example>
        </member>
        <member name="T:BankingApp.Helpers.HashingUtil">
            <summary>
            Provides cryptographic hashing utilities for password security
            </summary>
            <remarks>
            WARNING: For educational purposes only. In production systems,
            use specialized password hashing algorithms like PBKDF2, BCrypt or Argon2.
            </remarks>
        </member>
        <member name="M:BankingApp.Helpers.HashingUtil.HashPassword(System.String)">
            <summary>
            Creates a cryptographic hash of a password using SHA-256
            </summary>
            <param name="password">The plain-text password to hash</param>
            <returns>Base64-encoded hash string</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if password is null</exception>
            <remarks>
            Note: This basic implementation lacks:
            - Salt (vulnerable to rainbow table attacks)
            - Key stretching (vulnerable to brute force)
            - Modern password hashing algorithms
            </remarks>
        </member>
        <member name="M:BankingApp.Helpers.HashingUtil.VerifyPassword(System.String,System.String)">
            <summary>
            Verifies a password against a stored hash
            </summary>
            <param name="enteredPassword">Password to verify</param>
            <param name="storedHash">Previously stored hash to compare against</param>
            <returns>True if passwords match, false otherwise</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if either parameter is null</exception>
            <remarks>
            Uses simple hash comparison. In production, use constant-time comparison
            to prevent timing attacks.
            </remarks>
        </member>
        <member name="T:BankingApp.Helpers.AccountSelector">
            <summary>
            Provides console-based account selection utilities
            </summary>
        </member>
        <member name="M:BankingApp.Helpers.AccountSelector.SelectAccount(BankingApp.Models.User)">
            <summary>
            Displays a numbered list of accounts and prompts the user to select one
            </summary>
            <param name="user">The user whose accounts should be displayed</param>
            <returns>The selected BankAccount</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if user is null</exception>
            <exception cref="T:System.ArgumentException">Thrown if user has no accounts</exception>
            <remarks>
            The selection menu displays accounts in the format:
            [Index]. [AccountType] - [AccountNumber]
            Validates input and re-prompts on invalid selections.
            </remarks>
        </member>
        <member name="T:BankingApp.Interfaces.IAuthService">
            <summary>
            Handles password security operations
            </summary>
        </member>
        <member name="M:BankingApp.Interfaces.IAuthService.HashPassword(System.String)">
            <summary>
            Creates a secure hash from a password
            </summary>
            <param name="password">The password to hash</param>
            <returns>Hashed password string</returns>
        </member>
        <member name="M:BankingApp.Interfaces.IAuthService.VerifyPassword(System.String,System.String)">
            <summary>
            Checks if a password matches its hashed version
            </summary>
            <param name="password">Password to check</param>
            <param name="hashedPassword">Stored hashed password</param>
            <returns>True if password matches, false otherwise</returns>
        </member>
        <member name="T:BankingApp.Interfaces.IBankService">
            <summary>
            Provides banking operations for accounts
            </summary>
        </member>
        <member name="M:BankingApp.Interfaces.IBankService.CreateAccount(BankingApp.Models.User,BankingApp.Models.AccountType)">
            <summary>
            Creates a new bank account for a user
            </summary>
            <param name="user">Account owner</param>
            <param name="type">Type of account to create</param>
            <returns>Newly created account</returns>
        </member>
        <member name="M:BankingApp.Interfaces.IBankService.Deposit(BankingApp.Models.BankAccount,System.Decimal)">
            <summary>
            Deposits money into an account
            </summary>
            <param name="account">Account to deposit into</param>
            <param name="amount">Amount to deposit</param>
            <returns>Success status and message</returns>
        </member>
        <member name="M:BankingApp.Interfaces.IBankService.Withdraw(BankingApp.Models.BankAccount,System.Decimal)">
            <summary>
            Withdraws money from an account
            </summary>
            <param name="account">Account to withdraw from</param>
            <param name="amount">Amount to withdraw</param>
            <returns>Success status and message</returns>
        </member>
        <member name="M:BankingApp.Interfaces.IBankService.Transfer(BankingApp.Models.BankAccount,BankingApp.Models.BankAccount,System.Decimal)">
            <summary>
            Transfers money between accounts
            </summary>
            <param name="sender">Account sending money</param>
            <param name="recipient">Account receiving money</param>
            <param name="amount">Amount to transfer</param>
            <returns>Success status and message</returns>
        </member>
        <member name="M:BankingApp.Interfaces.IBankService.GetAccountsByType(BankingApp.Models.User,BankingApp.Models.AccountType)">
            <summary>
            Gets all accounts of a specific type for a user
            </summary>
            <param name="user">Account owner</param>
            <param name="type">Type of accounts to retrieve</param>
            <returns>List of matching accounts</returns>
        </member>
        <member name="T:BankingApp.Interfaces.IDataStore`2">
            <summary>
            Provides data storage and retrieval operations
            </summary>
            <typeparam name="TKey">The type of keys in the dictionary (must be not null)</typeparam>
            <typeparam name="TValue">The type of values in the dictionary</typeparam>
        </member>
        <member name="M:BankingApp.Interfaces.IDataStore`2.Load">
            <summary>
            Loads all data from storage
            </summary>
            <returns>Dictionary containing all stored data</returns>
        </member>
        <member name="M:BankingApp.Interfaces.IDataStore`2.Save(System.Collections.Generic.Dictionary{`0,`1})">
            <summary>
            Saves data to storage
            </summary>
            <param name="data">Dictionary containing data to save</param>
        </member>
        <member name="T:BankingApp.Interfaces.ITransactionService">
            <summary>
            Provides services for managing financial transactions
            </summary>
        </member>
        <member name="M:BankingApp.Interfaces.ITransactionService.LogTransaction(BankingApp.Models.BankAccount,BankingApp.Models.Transaction)">
            <summary>
            Records a transaction in an account's history
            </summary>
            <param name="account">Account to log transaction for</param>
            <param name="transaction">Transaction details to record</param>
        </member>
        <member name="M:BankingApp.Interfaces.ITransactionService.GetTransactions(BankingApp.Models.BankAccount)">
            <summary>
            Retrieves all transactions for an account
            </summary>
            <param name="account">Account to get transactions for</param>
            <returns>List of transactions ordered by date</returns>
        </member>
        <member name="T:BankingApp.Interfaces.IUserService">
            <summary>
            Provides user account management and authentication services
            </summary>
        </member>
        <member name="M:BankingApp.Interfaces.IUserService.Register(System.String,System.String)">
            <summary>
            Registers a new user account
            </summary>
            <param name="username">User's login name</param>
            <param name="password">User's password</param>
            <returns>Tuple containing success status and message</returns>
        </member>
        <member name="M:BankingApp.Interfaces.IUserService.Login(System.String,System.String)">
            <summary>
            Authenticates a user
            </summary>
            <param name="username">User's login name</param>
            <param name="password">User's password</param>
            <returns>Tuple containing success status, message, and user object if successful</returns>
        </member>
        <member name="M:BankingApp.Interfaces.IUserService.GetUser(System.String)">
            <summary>
            Retrieves a user by username
            </summary>
            <param name="username">User's login name to search for</param>
            <returns>User object if found, otherwise null</returns>
        </member>
        <member name="M:BankingApp.Interfaces.IUserService.Save">
            <summary>
            Saves all user data to persistent storage
            </summary>
        </member>
        <member name="M:BankingApp.Interfaces.IUserService.GetAllUsers">
            <summary>
            Gets all registered users
            </summary>
            <returns>List of all users in the system</returns>
        </member>
        <member name="T:BankingApp.Models.AccountType">
            <summary>
            Specifies the type of bank account.
            </summary>
        </member>
        <member name="F:BankingApp.Models.AccountType.Savings">
            <summary>
            Savings account type, typically used for personal savings with interest.
            </summary>
        </member>
        <member name="F:BankingApp.Models.AccountType.Current">
            <summary>
            Current/checking account type, typically used for daily transactions.
            </summary>
        </member>
        <member name="T:BankingApp.Models.BankAccount">
            <summary>
            Abstract base class representing a generic bank account.
            </summary>
            <remarks>
            This class provides the foundation for all account types in the banking system,
            containing common properties and methods that all accounts must implement.
            </remarks>
        </member>
        <member name="P:BankingApp.Models.BankAccount.AccountNo">
            <summary>
            Gets or sets the unique account number.
            </summary>
            <value>
            A string generated by <see cref="M:BankingApp.Helpers.AccountNumberGenerator.Generate"/> 
            during account creation.
            </value>
        </member>
        <member name="P:BankingApp.Models.BankAccount.Balance">
            <summary>
            Gets or sets the current account balance.
            </summary>
            <value>
            Decimal value representing the available funds. Initialized to 0.
            </value>
        </member>
        <member name="P:BankingApp.Models.BankAccount.DateCreated">
            <summary>
            Gets or sets the account creation timestamp.
            </summary>
            <value>
            <see cref="T:System.DateTime"/> set to the current time when the account is instantiated.
            </value>
        </member>
        <member name="P:BankingApp.Models.BankAccount.Owner">
            <summary>
            Gets or sets the account owner.
            </summary>
            <value>
            Required <see cref="T:BankingApp.Models.User"/> object representing the account holder.
            </value>
        </member>
        <member name="P:BankingApp.Models.BankAccount.TransactionHistory">
            <summary>
            Gets the transaction history for this account.
            </summary>
            <value>
            Read-only list of <see cref="T:BankingApp.Models.Transaction"/> objects in chronological order.
            </value>
        </member>
        <member name="P:BankingApp.Models.BankAccount.Type">
            <summary>
            Gets or sets the account type classification.
            </summary>
            <value>
            <see cref="T:BankingApp.Models.AccountType"/> enum value identifying the account category.
            </value>
        </member>
        <member name="M:BankingApp.Models.BankAccount.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:BankingApp.Models.BankAccount"/> class.
            </summary>
            <remarks>
            Automatically:
            <list type="bullet">
              <item><description>Generates an account number</description></item>
              <item><description>Sets creation timestamp to current time</description></item>
              <item><description>Initializes empty transaction history</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:BankingApp.Models.BankAccount.#ctor(System.String,System.DateTime,System.Collections.Generic.List{BankingApp.Models.Transaction})">
            <summary>
            Protected constructor for JSON deserialization
            </summary>
        </member>
        <member name="M:BankingApp.Models.BankAccount.Deposit(System.Decimal)">
            <summary>
            When implemented in a derived class, deposits the specified amount into the account.
            </summary>
            <param name="amount">The positive decimal value to deposit.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="amount"/> is zero or negative.
            </exception>
        </member>
        <member name="M:BankingApp.Models.BankAccount.Withdraw(System.Decimal)">
            <summary>
            When implemented in a derived class, withdraws the specified amount from the account.
            </summary>
            <param name="amount">The positive decimal value to withdraw.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when:
            <list type="bullet">
              <item><description><paramref name="amount"/> is zero or negative</description></item>
              <item><description>Insufficient funds are available</description></item>
            </list>
            </exception>
        </member>
        <member name="M:BankingApp.Models.BankAccount.Transfer(System.Decimal,BankingApp.Models.BankAccount)">
            <summary>
            When implemented in a derived class, transfers funds to another account.
            </summary>
            <param name="amount">The positive decimal value to transfer.</param>
            <param name="recipientAccount">The destination <see cref="T:BankingApp.Models.BankAccount"/>.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when:
            <list type="bullet">
              <item><description><paramref name="amount"/> is zero or negative</description></item>
              <item><description>Insufficient funds are available</description></item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="recipientAccount"/> is null.
            </exception>
        </member>
        <member name="M:BankingApp.Models.BankAccount.Credit(System.Decimal)">
            <summary>
            Credits the account with the specified amount without transaction recording.
            </summary>
            <param name="amount">The positive decimal value to credit.</param>
            <remarks>
            Derived classes should override this method if they need to:
            <list type="bullet">
              <item><description>Add transaction recording</description></item>
              <item><description>Implement special credit logic</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:BankingApp.Models.CurrentAccount">
            <summary>
            Represents a current (checking) account that allows deposits, withdrawals, and transfers.
            Inherits from <see cref="T:BankingApp.Models.BankAccount"/> with no interest accrual.
            </summary>
            <remarks>
            Current accounts typically:
            <list type="bullet">
              <item><description>Have no monthly interest</description></item>
              <item><description>May allow overdrafts (not implemented here)</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:BankingApp.Models.CurrentAccount.#ctor(BankingApp.Models.User)">
            <summary>
            Initializes a new current account for the specified owner.
            </summary>
            <param name="owner">The account owner. Must not be null.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="owner"/> is null.</exception>
        </member>
        <member name="M:BankingApp.Models.CurrentAccount.Deposit(System.Decimal)">
            <summary>
            Deposits the specified amount into the account and records the transaction.
            </summary>
            <param name="amount">The positive amount to deposit. Must be greater than zero.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when:
            <list type="bullet">
              <item><description><paramref name="amount"/> is zero or negative</description></item>
            </list>
            </exception>
        </member>
        <member name="M:BankingApp.Models.CurrentAccount.Withdraw(System.Decimal)">
            <summary>
            Withdraws the specified amount from the account if sufficient funds are available.
            </summary>
            <param name="amount">The positive amount to withdraw. Must not exceed <see cref="P:BankingApp.Models.BankAccount.Balance"/>.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when:
            <list type="bullet">
              <item><description><paramref name="amount"/> is zero or negative</description></item>
              <item><description>Insufficient funds are available</description></item>
            </list>
            </exception>
        </member>
        <member name="M:BankingApp.Models.CurrentAccount.Transfer(System.Decimal,BankingApp.Models.BankAccount)">
            <summary>
            Transfers funds to another account and records transactions in both accounts.
            </summary>
            <param name="amount">The positive amount to transfer. Must not exceed <see cref="P:BankingApp.Models.BankAccount.Balance"/>.</param>
            <param name="recipientAccount">The destination account. Must not be null.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when:
            <list type="bullet">
              <item><description><paramref name="amount"/> is zero or negative</description></item>
              <item><description>Insufficient funds are available</description></item>
            </list>
            </exception>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="recipientAccount"/> is null.</exception>
        </member>
        <member name="T:BankingApp.Models.SavingsAccount">
            <summary>
            Represents a savings account that provides interest earnings and has transfer limits.
            </summary>
            <remarks>
            <para>
            Savings accounts typically have:
            </para>
            <list type="bullet">
              <item><description>Interest earning capabilities (not shown in this implementation)</description></item>
              <item><description>Withdrawal and transfer limits (max 200,000 per transaction)</description></item>
              <item><description>Higher interest rates than current accounts</description></item>
            </list>
            </remarks>
            
        </member>
        <member name="F:BankingApp.Models.SavingsAccount.MaxTransferLimit">
            <summary>
            Maximum allowed transfer/withdrawal amount for savings accounts.
            </summary>
            <value>
            Constant value of 200,000 representing the transaction limit.
            </value>
        </member>
        <member name="M:BankingApp.Models.SavingsAccount.#ctor(BankingApp.Models.User)">
            <summary>
            Initializes a new savings account for the specified owner.
            </summary>
            <param name="owner">The <see cref="T:BankingApp.Models.User"/> who owns this account. Must not be null.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="owner"/> is null.</exception>
        </member>
        <member name="M:BankingApp.Models.SavingsAccount.#ctor(System.String,System.DateTime,System.Collections.Generic.List{BankingApp.Models.Transaction},BankingApp.Models.AccountType)">
            <summary>
            Protected constructor for JSON deserialization
            </summary>
        </member>
        <member name="M:BankingApp.Models.SavingsAccount.Deposit(System.Decimal)">
            <summary>
            Deposits the specified amount into the savings account.
            </summary>
            <param name="amount">The positive amount to deposit. Must be greater than zero.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when:
            <list type="bullet">
              <item><description><paramref name="amount"/> is zero or negative</description></item>
            </list>
            </exception>
            <remarks>
            Records the transaction in <see cref="P:BankingApp.Models.BankAccount.TransactionHistory"/>.
            </remarks>
        </member>
        <member name="M:BankingApp.Models.SavingsAccount.Withdraw(System.Decimal)">
            <summary>
            Withdraws the specified amount from the savings account.
            </summary>
            <param name="amount">The positive amount to withdraw. Must not exceed <see cref="F:BankingApp.Models.SavingsAccount.MaxTransferLimit"/> or available balance.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when:
            <list type="bullet">
              <item><description><paramref name="amount"/> exceeds <see cref="F:BankingApp.Models.SavingsAccount.MaxTransferLimit"/></description></item>
              <item><description>Insufficient funds are available</description></item>
              <item><description><paramref name="amount"/> is zero or negative</description></item>
            </list>
            </exception>
            <remarks>
            Savings accounts have stricter withdrawal limits than current accounts.
            </remarks>
        </member>
        <member name="M:BankingApp.Models.SavingsAccount.Transfer(System.Decimal,BankingApp.Models.BankAccount)">
            <summary>
            Transfers funds to another account while respecting savings account limits.
            </summary>
            <param name="amount">The positive amount to transfer. Must not exceed <see cref="F:BankingApp.Models.SavingsAccount.MaxTransferLimit"/>.</param>
            <param name="recipientAccount">The destination <see cref="T:BankingApp.Models.BankAccount"/>. Must not be null.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="recipientAccount"/> is null.</exception>
            <exception cref="T:System.ArgumentException">
            Thrown when:
            <list type="bullet">
              <item><description><paramref name="amount"/> exceeds <see cref="F:BankingApp.Models.SavingsAccount.MaxTransferLimit"/></description></item>
              <item><description>Insufficient funds are available</description></item>
              <item><description><paramref name="amount"/> is zero or negative</description></item>
            </list>
            </exception>
            <remarks>
            Records transactions in both the sender's and recipient's transaction histories.
            </remarks>
        </member>
        <member name="T:BankingApp.Models.TransactionType">
            <summary>
            Specifies the type of financial transaction.
            </summary>
        </member>
        <member name="F:BankingApp.Models.TransactionType.Deposit">
            <summary>
            Funds being added to an account.
            </summary>
        </member>
        <member name="F:BankingApp.Models.TransactionType.Withdraw">
            <summary>
            Funds being removed from an account.
            </summary>
        </member>
        <member name="F:BankingApp.Models.TransactionType.Transfer">
            <summary>
            Funds being moved between accounts.
            </summary>
        </member>
        <member name="T:BankingApp.Models.Transaction">
            <summary>
            Represents a financial transaction in the banking system.
            </summary>
            <remarks>
            This class records all details of monetary movements including:
            <list type="bullet">
              <item><description>The transaction amount</description></item>
              <item><description>Timestamp</description></item>
              <item><description>Description of the transaction</description></item>
              <item><description>Related account (for transfers)</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:BankingApp.Models.Transaction.Id">
            <summary>
            Gets or sets the unique transaction identifier.
            </summary>
            <value>
            Auto-generated GUID string that uniquely identifies the transaction.
            </value>
        </member>
        <member name="P:BankingApp.Models.Transaction.Amount">
            <summary>
            Gets the monetary amount involved in the transaction.
            </summary>
            <value>
            Positive decimal number representing the transaction value.
            </value>
        </member>
        <member name="P:BankingApp.Models.Transaction.Date">
            <summary>
            Gets the date and time when the transaction occurred.
            </summary>
            <value>
            DateTime set to when the transaction was created.
            </value>
        </member>
        <member name="P:BankingApp.Models.Transaction.Description">
            <summary>
            Gets or sets the human-readable description of the transaction.
            </summary>
            <value>
            String explaining the transaction purpose in natural language.
            </value>
        </member>
        <member name="P:BankingApp.Models.Transaction.OtherPartyAcct">
            <summary>
            Gets or sets the related account for transfer transactions.
            </summary>
            <value>
            <see cref="T:BankingApp.Models.BankAccount"/> involved in the transaction (for transfers), or null for deposits/withdrawals.
            </value>
        </member>
        <member name="P:BankingApp.Models.Transaction.Type">
            <summary>
            Gets or sets the classification of the transaction.
            </summary>
            <value>
            <see cref="T:BankingApp.Models.TransactionType"/> enum value specifying the transaction category.
            </value>
        </member>
        <member name="P:BankingApp.Models.Transaction.BalanceBeforeTransaction">
            <summary>
             
            </summary>
        </member>
        <member name="P:BankingApp.Models.Transaction.BalanceAfterTransaction">
            <summary>
            Gets the account balance immediately after this transaction was processed.
            </summary>
            <value>
            Decimal value representing the running balance post-transaction.
            </value>
            <remarks>
            This snapshot helps reconstruct account history and provides context for
            financial auditing. It's set automatically during transaction processing.
            </remarks>
        </member>
        <member name="M:BankingApp.Models.Transaction.#ctor(System.Decimal,System.Decimal,System.String,BankingApp.Models.BankAccount,BankingApp.Models.TransactionType,System.Nullable{System.DateTime})">
            <summary>
            Initializes a new instance of the <see cref="T:BankingApp.Models.Transaction"/> class.
            </summary>
            <param name="amount">The positive monetary value of the transaction.</param>
            <param name="currentBalance">The account balance BEFORE processing this transaction.</param>
             <param name="description">Human-readable explanation of the transaction.</param>
             <param name="otherPartyAcct">
             The other <see cref="T:BankingApp.Models.BankAccount"/> involved (for transfers), or null for deposits/withdrawals.
             </param>
             <param name="type">The <see cref="T:BankingApp.Models.TransactionType"/> classification.</param>
             <exception cref="T:System.ArgumentException">
             Thrown when <paramref name="amount"/> is zero or negative.
             </exception>
             <exception cref="T:System.ArgumentNullException">
             Thrown when <paramref name="description"/> is null or empty.
             </exception>
             <param name="timestamp">
             Optional DateTime to set the transaction date. Defaults to current time if null.
             </param>
             /// <remarks>
             This constructor sets the transaction ID, amount, date, description, related account,
             type, and calculates the balance after the transaction. 
             /// It ensures all required fields are properly initialized and validated.
            </remarks>
        </member>
        <member name="T:BankingApp.Models.User">
            <summary>
            Represents a user in the banking application system.
            </summary>
            <remarks>
            This class stores user credentials and manages their associated bank accounts.
            <para>
            Security Notes:
            </para>
            <list type="bullet">
              <item><description>Passwords are stored as hashes, never in plain text</description></item>
              <item><description>Username validation enforces non-empty values</description></item>
            </list>
            </remarks>
        </member>
        <member name="P:BankingApp.Models.User.UserId">
            <summary>
            Gets the unique identifier for the user.
            </summary>
            <value>
            Auto-generated GUID string that uniquely identifies the user.
            </value>
        </member>
        <member name="P:BankingApp.Models.User.Username">
            <summary>
            Gets or sets the username for authentication and display purposes.
            </summary>
            <value>
            Non-empty string representing the user's unique identifier.
            </value>
            <exception cref="T:System.ArgumentException">
            Thrown when attempting to set an empty or whitespace value.
            </exception>
        </member>
        <member name="P:BankingApp.Models.User.PasswordHash">
            <summary>
            Gets or sets the hashed version of the user's password.
            </summary>
            <value>
            String containing the password hash (generated by the authentication system).
            </value>
            <remarks>
            Note: This should never contain plain text passwords.
            </remarks>
        </member>
        <member name="P:BankingApp.Models.User.Accounts">
            <summary>
            Gets the list of bank accounts associated with this user.
            </summary>
            <value>
            Collection of <see cref="T:BankingApp.Models.BankAccount"/> objects owned by the user.
            </value>
        </member>
        <member name="M:BankingApp.Models.User.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:BankingApp.Models.User"/> class.
            </summary>
            <param name="username">The user's unique identifier. Cannot be empty.</param>
            <param name="passwordHash">The hashed version of the user's password.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="username"/> is null or whitespace.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            Thrown when <paramref name="passwordHash"/> is null.
            </exception>
        </member>
        <member name="M:BankingApp.Models.User.#ctor(System.String,System.String,System.String,System.Collections.Generic.List{BankingApp.Models.BankAccount})">
            <summary>
            Protected constructor for JSON deserialization.
            This constructor is used by the JSON serializer to create instances of User from JSON data.
            </summary>
            <param name="userId"></param>
            <param name="username"></param>
            <param name="passwordHash"></param>
            <param name="accounts"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:BankingApp.Services.AuthService">
            <summary>
            Provides authentication services for user password management.
            </summary>
            <remarks>
            <para>
            This service handles:
            </para>
            <list type="bullet">
              <item><description>Secure password hashing</description></item>
              <item><description>Password verification</description></item>
            </list>
            <para>
            Security Implementation:
            </para>
            <list type="bullet">
              <item><description>Uses <see cref="T:BankingApp.Helpers.HashingUtil"/> for cryptographic operations</description></item>
              <item><description>Implements industry-standard password hashing</description></item>
              <item><description>Never stores plain text passwords</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:BankingApp.Services.AuthService.HashPassword(System.String)">
            <summary>
            Generates a secure hash of the provided password.
            </summary>
            <param name="password">The plain text password to hash.</param>
            <returns>A secure hash string of the password.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="password"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="password"/> is empty or whitespace.</exception>
            <remarks>
            The hashing algorithm includes:
            <list type="bullet">
              <item><description>Salting for rainbow table protection</description></item>
              <item><description>Key stretching for brute-force resistance</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:BankingApp.Services.AuthService.VerifyPassword(System.String,System.String)">
            <summary>
            Verifies if a entered password matches the stored hash.
            </summary>
            <param name="enteredPassword">The plain text password to verify.</param>
            <param name="storedPasswordHash">The previously stored hash to compare against.</param>
            <returns>True if the password matches the hash, false otherwise.</returns>
            <exception cref="T:System.ArgumentNullException">
            Thrown when either <paramref name="enteredPassword"/> or <paramref name="storedPasswordHash"/> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            Thrown when either parameter is empty or whitespace.
            </exception>
            <remarks>
            Uses constant-time comparison to prevent timing attacks.
            </remarks>
        </member>
        <member name="T:BankingApp.Services.BankService">
            <summary>
            Provides core banking operations for account management and transactions.
            </summary>
            <remarks>
            This service acts as the main facade for banking operations including:
            <list type="bullet">
              <item><description>Account creation</description></item>
              <item><description>Deposit/withdrawal processing</description></item>
              <item><description>Fund transfers between accounts</description></item>
              <item><description>Account querying</description></item>
            </list>
            <para>
            All operations automatically persist changes via <see cref="T:BankingApp.Interfaces.IUserService"/>.
            </para>
            </remarks>
        </member>
        <member name="M:BankingApp.Services.BankService.#ctor(BankingApp.Interfaces.IUserService)">
            <summary>
            Initializes a new instance of the <see cref="T:BankingApp.Services.BankService"/> class.
            </summary>
            <param name="userService">The user service dependency for data persistence.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="userService"/> is null.</exception>
        </member>
        <member name="M:BankingApp.Services.BankService.CreateAccount(BankingApp.Models.User,BankingApp.Models.AccountType)">
            <summary>
            Creates a new bank account of the specified type for the given user.
            </summary>
            <param name="user">The account owner. Must not be null.</param>
            <param name="type">The type of account to create.</param>
            <returns>The newly created <see cref="T:BankingApp.Models.BankAccount"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="user"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="type"/> is invalid.</exception>
            <remarks>
            The created account is automatically:
            <list type="bullet">
              <item><description>Added to the user's account list</description></item>
              <item><description>Persisted via <see cref="T:BankingApp.Interfaces.IUserService"/></description></item>
            </list>
            </remarks>
        </member>
        <member name="M:BankingApp.Services.BankService.Deposit(BankingApp.Models.BankAccount,System.Decimal)">
            <summary>
            Processes a deposit transaction into the specified account.
            </summary>
            <param name="account">The target account. Must not be null.</param>
            <param name="amount">The positive amount to deposit.</param>
            <returns>
            A tuple where:
            <list type="table">
              <item><term>Success</term><description>True if operation succeeded</description></item>
              <item><term>Message</term><description>Status message or error description</description></item>
            </list>
            </returns>
            <remarks>
            Successful deposits are automatically persisted.
            </remarks>
        </member>
        <member name="M:BankingApp.Services.BankService.Withdraw(BankingApp.Models.BankAccount,System.Decimal)">
            <summary>
            Processes a withdrawal transaction from the specified account.
            </summary>
            <param name="account">The source account. Must not be null.</param>
            <param name="amount">The positive amount to withdraw.</param>
            <returns>
            A tuple where:
            <list type="table">
              <item><term>Success</term><description>True if operation succeeded</description></item>
              <item><term>Message</term><description>Status message or error description</description></item>
            </list>
            </returns>
            <remarks>
            Validates sufficient funds before processing.
            Successful withdrawals are automatically persisted.
            </remarks>
        </member>
        <member name="M:BankingApp.Services.BankService.Transfer(BankingApp.Models.BankAccount,BankingApp.Models.BankAccount,System.Decimal)">
            <summary>
            Processes a transfer between two accounts.
            </summary>
            <param name="sender">The source account. Must not be null.</param>
            <param name="recipient">The destination account. Must not be null.</param>
            <param name="amount">The positive amount to transfer.</param>
            <returns>
            A tuple where:
            <list type="table">
              <item><term>Success</term><description>True if operation succeeded</description></item>
              <item><term>Message</term><description>Status message or error description</description></item>
            </list>
            </returns>
            <remarks>
            Validates:
            <list type="bullet">
              <item><description>Different accounts</description></item>
              <item><description>Sufficient funds</description></item>
              <item><description>Positive amount</description></item>
            </list>
            Successful transfers are automatically persisted.
            </remarks>
        </member>
        <member name="M:BankingApp.Services.BankService.GetAccountsByType(BankingApp.Models.User,BankingApp.Models.AccountType)">
            <summary>
            Retrieves all accounts of a specific type for the given user.
            </summary>
            <param name="user">The account owner. Must not be null.</param>
            <param name="type">The account type to filter by.</param>
            <returns>A list of matching <see cref="T:BankingApp.Models.BankAccount"/> objects.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="user"/> is null.</exception>
        </member>
        <member name="T:BankingApp.Services.TransactionService">
            <summary>
            Provides services for managing financial transactions.
            </summary>
            <remarks>
            This service handles:
            <list type="bullet">
              <item><description>Recording transaction history</description></item>
              <item><description>Retrieving transaction records</description></item>
            </list>
            <para>
            Security Features:
            </para>
            <list type="bullet">
              <item><description>Null validation for all input parameters</description></item>
              <item><description>Defensive copying of transaction lists</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:BankingApp.Services.TransactionService.LogTransaction(BankingApp.Models.BankAccount,BankingApp.Models.Transaction)">
            <summary>
            Records a transaction in the specified account's history.
            </summary>
            <param name="account">The <see cref="T:BankingApp.Models.BankAccount"/> to log the transaction to. Must not be null.</param>
            <param name="transaction">The <see cref="T:BankingApp.Models.Transaction"/> to record. Must not be null.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when:
            <list type="bullet">
              <item><description><paramref name="account"/> is null</description></item>
              <item><description><paramref name="transaction"/> is null</description></item>
            </list>
            </exception>
            <remarks>
            The transaction is added to the account's <see cref="P:BankingApp.Models.BankAccount.TransactionHistory"/> collection.
            </remarks>
        </member>
        <member name="M:BankingApp.Services.TransactionService.GetTransactions(BankingApp.Models.BankAccount)">
            <summary>
            Retrieves all transactions for the specified account.
            </summary>
            <param name="account">The <see cref="T:BankingApp.Models.BankAccount"/> to retrieve transactions from. Must not be null.</param>
            <returns>
            A new <see cref="T:System.Collections.Generic.List`1"/> containing all transactions for the account.
            </returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="account"/> is null.</exception>
            <remarks>
            <para>
            This method returns a defensive copy of the transaction history to prevent:
            </para>
            <list type="bullet">
              <item><description>External modification of the original collection</description></item>
              <item><description>Thread-safety issues</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:BankingApp.Services.UserService">
            <summary>
            Provides user management services including registration, authentication, and user data access.
            </summary>
            <remarks>
            <para>
            This service handles:
            </para>
            <list type="bullet">
              <item><description>User registration and validation</description></item>
              <item><description>User authentication (login)</description></item>
              <item><description>User data persistence</description></item>
              <item><description>User information retrieval</description></item>
            </list>
            <para>
            Security Features:
            </para>
            <list type="bullet">
              <item><description>Password hashing via <see cref="T:BankingApp.Interfaces.IAuthService"/></description></item>
              <item><description>Input validation for credentials</description></item>
              <item><description>In-memory user caching with file persistence</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:BankingApp.Services.UserService.#ctor(BankingApp.Interfaces.IDataStore{System.String,BankingApp.Models.User},BankingApp.Interfaces.IAuthService)">
            <summary>
            Initializes a new instance of the <see cref="T:BankingApp.Services.UserService"/> class.
            </summary>
            <param name="dataStore">The data store for user persistence.</param>
            <param name="authService">The authentication service for password handling.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown when either <paramref name="dataStore"/> or <paramref name="authService"/> is null.
            </exception>
            <remarks>
            Automatically loads user data from the data store into memory during initialization.
            </remarks>
        </member>
        <member name="M:BankingApp.Services.UserService.Save">
            <summary>
            Persists all user data to the underlying data store.
            </summary>
            <remarks>
            Writes the current in-memory user collection to persistent storage.
            </remarks>
        </member>
        <member name="M:BankingApp.Services.UserService.Register(System.String,System.String)">
            <summary>
            Registers a new user with the system.
            </summary>
            <param name="username">The desired username. Must not be empty or whitespace.</param>
            <param name="password">The plain-text password. Must not be empty or whitespace.</param>
            <returns>
            A tuple containing:
            <list type="table">
              <item><term>Success</term><description>True if registration succeeded</description></item>
              <item><term>Message</term><description>Status message or error description</description></item>
            </list>
            </returns>
            <remarks>
            <para>
            Registration process:
            </para>
            <list type="number">
              <item><description>Validates input parameters</description></item>
              <item><description>Checks for username availability</description></item>
              <item><description>Hashes the password</description></item>
              <item><description>Creates and stores the new user</description></item>
              <item><description>Persists changes automatically</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:BankingApp.Services.UserService.Login(System.String,System.String)">
            <summary>
            Authenticates a user with the provided credentials.
            </summary>
            <param name="username">The username to authenticate.</param>
            <param name="password">The plain-text password to verify.</param>
            <returns>
            A tuple containing:
            <list type="table">
              <item><term>Success</term><description>True if authentication succeeded</description></item>
              <item><term>Message</term><description>Status message or error description</description></item>
              <item><term>User</term><description>The authenticated user if successful, otherwise null</description></item>
            </list>
            </returns>
            <remarks>
            <para>
            Authentication process:
            </para>
            <list type="number">
              <item><description>Validates input parameters</description></item>
              <item><description>Verifies username exists</description></item>
              <item><description>Verifies password matches stored hash</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:BankingApp.Services.UserService.GetUser(System.String)">
            <summary>
            Retrieves a user by their username.
            </summary>
            <param name="username">The username to search for.</param>
            <returns>
            The <see cref="T:BankingApp.Models.User"/> if found, otherwise null.
            </returns>
            <remarks>
            Performs a case-sensitive search of the username.
            </remarks>
        </member>
        <member name="M:BankingApp.Services.UserService.GetAllUsers">
            <summary>
            Retrieves all users in the system.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.List`1"/> containing all registered users.
            </returns>
            <remarks>
            Returns a defensive copy of the user collection to prevent modification.
            </remarks>
        </member>
        <member name="T:Program">
            <summary>
            Main entry point for the BankSim console application.
            </summary>
            <remarks>
            This program provides a console-based interface for:
            <list type="bullet">
              <item><description>User registration and authentication</description></item>
              <item><description>Bank account management</description></item>
              <item><description>Financial transactions (deposits, withdrawals, transfers)</description></item>
              <item><description>Transaction history viewing</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:Program.Main">
            <summary>
            Main method
            </summary>
        </member>
    </members>
</doc>
