using System.Text.Json.Serialization;

namespace BankingApp.Models
{
    /// <summary>
    /// Represents a user in the banking application system.
    /// </summary>
    /// <remarks>
    /// This class stores user credentials and manages their associated bank accounts.
    /// <para>
    /// Security Notes:
    /// </para>
    /// <list type="bullet">
    ///   <item><description>Passwords are stored as hashes, never in plain text</description></item>
    ///   <item><description>Username validation enforces non-empty values</description></item>
    /// </list>
    /// </remarks>
    public class User
    {
        /// <summary>
        /// Gets the unique identifier for the user.
        /// </summary>
        /// <value>
        /// Auto-generated GUID string that uniquely identifies the user.
        /// </value>
        public string UserId { get; set; } = Guid.NewGuid().ToString();

        private string? _username;

        /// <summary>
        /// Gets or sets the username for authentication and display purposes.
        /// </summary>
        /// <value>
        /// Non-empty string representing the user's unique identifier.
        /// </value>
        /// <exception cref="ArgumentException">
        /// Thrown when attempting to set an empty or whitespace value.
        /// </exception>
        public string Username
        {
            get => _username!;
            set
            {
                if (string.IsNullOrWhiteSpace(value))
                {
                    throw new ArgumentException("Username cannot be empty.", nameof(value));
                }
                _username = value;
            }
        }

        /// <summary>
        /// Gets or sets the hashed version of the user's password.
        /// </summary>
        /// <value>
        /// String containing the password hash (generated by the authentication system).
        /// </value>
        /// <remarks>
        /// Note: This should never contain plain text passwords.
        /// </remarks>
        public string PasswordHash { get; set; }

        /// <summary>
        /// Gets the list of bank accounts associated with this user.
        /// </summary>
        /// <value>
        /// Collection of <see cref="BankAccount"/> objects owned by the user.
        /// </value>
        public List<BankAccount> Accounts { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="User"/> class.
        /// </summary>
        /// <param name="username">The user's unique identifier. Cannot be empty.</param>
        /// <param name="passwordHash">The hashed version of the user's password.</param>
        /// <exception cref="ArgumentException">
        /// Thrown when <paramref name="username"/> is null or whitespace.
        /// </exception>
        /// <exception cref="ArgumentNullException">
        /// Thrown when <paramref name="passwordHash"/> is null.
        /// </exception>
        public User(string username, string passwordHash)
        {
            this.Username = username; // Uses property setter for validation
            this.PasswordHash = passwordHash ?? throw new ArgumentNullException(nameof(passwordHash));
            this.Accounts = new List<BankAccount>();
        }
        
        /// <summary>
        /// Protected constructor for JSON deserialization.
        /// This constructor is used by the JSON serializer to create instances of User from JSON data.
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="username"></param>
        /// <param name="passwordHash"></param>
        /// <param name="accounts"></param>
        /// <exception cref="ArgumentNullException"></exception>
        [JsonConstructor]
        protected User(string userId, string username, string passwordHash, List<BankAccount> accounts)
        {
            this.UserId = userId;
            this.Username = username;
            this.PasswordHash = passwordHash ?? throw new ArgumentNullException(nameof(passwordHash));
            this.Accounts = accounts ?? new List<BankAccount>();
        }
    }
}