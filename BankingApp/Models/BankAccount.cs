using System.Collections.Generic;
using Newtonsoft.Json;

namespace BankingApp.Models
{
    /// <summary>
    /// Specifies the type of bank account.
    /// </summary>
    public enum AccountType
    {
        /// <summary>
        /// Savings account type, typically used for personal savings with interest.
        /// </summary>
        Savings,

        /// <summary>
        /// Current/checking account type, typically used for daily transactions.
        /// </summary>
        Current
    }

    /// <summary>
    /// Abstract base class representing a generic bank account.
    /// </summary>
    /// <remarks>
    /// This class provides the foundation for all account types in the banking system,
    /// containing common properties and methods that all accounts must implement.
    /// </remarks>
    [JsonObject(IsReference = true)]
    public abstract class BankAccount
    {
        /// <summary>
        /// Gets or sets the unique account number.
        /// </summary>
        /// <value>
        /// A string generated by <see cref="Helpers.AccountNumberGenerator.Generate"/> 
        /// during account creation.
        /// </value>
        public string AccountNo { get; set; }

        /// <summary>
        /// Gets or sets the current account balance.
        /// </summary>
        /// <value>
        /// Decimal value representing the available funds. Initialized to 0.
        /// </value>
        public decimal Balance { get; set; }

        /// <summary>
        /// Gets or sets the account creation timestamp.
        /// </summary>
        /// <value>
        /// <see cref="DateTime"/> set to the current time when the account is instantiated.
        /// </value>
        public DateTime DateCreated { get; set; }

        /// <summary>
        /// Gets or sets the account owner.
        /// </summary>
        /// <value>
        /// Required <see cref="User"/> object representing the account holder.
        /// </value>
        [JsonIgnore]
        public required User Owner { get; set; }

        /// <summary>
        /// Gets the transaction history for this account.
        /// </summary>
        /// <value>
        /// Read-only list of <see cref="Transaction"/> objects in chronological order.
        /// </value>
        public List<Transaction> TransactionHistory { get; private set; }

        /// <summary>
        /// Gets or sets the account type classification.
        /// </summary>
        /// <value>
        /// <see cref="AccountType"/> enum value identifying the account category.
        /// </value>
        public AccountType Type { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="BankAccount"/> class.
        /// </summary>
        /// <remarks>
        /// Automatically:
        /// <list type="bullet">
        ///   <item><description>Generates an account number</description></item>
        ///   <item><description>Sets creation timestamp to current time</description></item>
        ///   <item><description>Initializes empty transaction history</description></item>
        /// </list>
        /// </remarks>
        public BankAccount()
        {
            this.AccountNo = Helpers.AccountNumberGenerator.Generate();
            this.DateCreated = DateTime.Now;
            this.TransactionHistory = new List<Transaction>();
        }

        /// <summary>
        /// Protected constructor for JSON deserialization
        /// </summary>
        [JsonConstructor]
        protected BankAccount(string accountNo, DateTime dateCreated, List<Transaction> transactionHistory)
        {
            this.AccountNo = accountNo;
            this.DateCreated = dateCreated;
            this.TransactionHistory = transactionHistory ?? new List<Transaction>();
        }
        /// <summary>
        /// When implemented in a derived class, deposits the specified amount into the account.
        /// </summary>
        /// <param name="amount">The positive decimal value to deposit.</param>
        /// <exception cref="ArgumentException">
        /// Thrown when <paramref name="amount"/> is zero or negative.
        /// </exception>
        public abstract void Deposit(decimal amount);

        /// <summary>
        /// When implemented in a derived class, withdraws the specified amount from the account.
        /// </summary>
        /// <param name="amount">The positive decimal value to withdraw.</param>
        /// <exception cref="ArgumentException">
        /// Thrown when:
        /// <list type="bullet">
        ///   <item><description><paramref name="amount"/> is zero or negative</description></item>
        ///   <item><description>Insufficient funds are available</description></item>
        /// </list>
        /// </exception>
        public abstract void Withdraw(decimal amount);

        /// <summary>
        /// When implemented in a derived class, transfers funds to another account.
        /// </summary>
        /// <param name="amount">The positive decimal value to transfer.</param>
        /// <param name="recipientAccount">The destination <see cref="BankAccount"/>.</param>
        /// <exception cref="ArgumentException">
        /// Thrown when:
        /// <list type="bullet">
        ///   <item><description><paramref name="amount"/> is zero or negative</description></item>
        ///   <item><description>Insufficient funds are available</description></item>
        /// </list>
        /// </exception>
        /// <exception cref="ArgumentNullException">
        /// Thrown when <paramref name="recipientAccount"/> is null.
        /// </exception>
        public abstract void Transfer(decimal amount, BankAccount recipientAccount);

        /// <summary>
        /// Credits the account with the specified amount without transaction recording.
        /// </summary>
        /// <param name="amount">The positive decimal value to credit.</param>
        /// <remarks>
        /// Derived classes should override this method if they need to:
        /// <list type="bullet">
        ///   <item><description>Add transaction recording</description></item>
        ///   <item><description>Implement special credit logic</description></item>
        /// </list>
        /// </remarks>
        public virtual void Credit(decimal amount)
        {
            Balance += amount;
        }
    }
}